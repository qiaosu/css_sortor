#!/usr/bin/env ruby
require 'gli'
require 'css_sortor'

include GLI::App

program_desc 'Fantasy CSS Sort Out Method.'

version CssSortor::VERSION

desc 'hard-code check.'
switch [:d,:hardcode]

desc 'remove comments?'
switch [:c,:comment]

desc 'how properties sort by. abc: A - Z | group: system specified group'
default_value 'abc'
arg_name 'mode'
flag [:o,:order]

desc 'Generate new .css file from a targeted input.'
arg_name 'Describe arguments to generate here'
command [:g, :generate] do |c|
  c.desc 'Describe a switch to generate'
  c.switch :s

  c.desc 'Describe a flag to generate'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"
    options = {}
    options[:order] = global_options[:order].gsub(/^=/, '')
    options[:comment] = global_options[:comment]
    options[:path] = args[0]
    options[:target] = args[1]

    CSSSortor.new(options)
  end
end

desc 'Generate new package for all .css files in the specified path.'
arg_name 'Describe arguments to package here'
command [:p, :package] do |c|
  c.action do |global_options,options,args|
    puts "package command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
